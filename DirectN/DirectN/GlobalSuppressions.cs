using System.Diagnostics.CodeAnalysis;

[assembly: SuppressMessage("Design", "CA1051:Do not declare visible instance fields", Justification = "We want to keep an interop name exactly as is", Scope = "namespaceanddescendants", Target = "DirectN")]
[assembly: SuppressMessage("Design", "CA1040:Avoid empty interfaces", Justification = "Tell that to the original interface designer.", Scope = "namespaceanddescendants", Target = "DirectN")]
[assembly: SuppressMessage("Design", "CA1054:Uri parameters should not be strings", Justification = "We want to keep an interop name exactly as is", Scope = "namespaceanddescendants", Target = "DirectN")]
[assembly: SuppressMessage("Design", "CA1060:Move pinvokes to native methods class", Justification = "Hmmm... nope", Scope = "namespaceanddescendants", Target = "DirectN")]
[assembly: SuppressMessage("Globalization", "CA2101:Specify marshaling for P/Invoke string arguments", Justification = "Hmmm... this seems this rule doesn't understand LPSTR", Scope = "namespaceanddescendants", Target = "DirectN")]
[assembly: SuppressMessage("Interoperability", "CA1401:P/Invokes should not be visible", Justification = "This is the whole point", Scope = "namespaceanddescendants", Target = "DirectN")]
[assembly: SuppressMessage("Naming", "CA1707:Identifiers should not contain underscores", Justification = "We want to keep an interop name exactly as is", Scope = "namespaceanddescendants", Target = "DirectN")]
[assembly: SuppressMessage("Naming", "CA1712:Do not prefix enum values with type name", Justification = "We want to keep an interop name exactly as is", Scope = "namespaceanddescendants", Target = "DirectN")]
[assembly: SuppressMessage("Naming", "CA1716:Identifiers should not match keywords", Justification = "We want to keep an interop name exactly as is", Scope = "namespaceanddescendants", Target = "DirectN")]
[assembly: SuppressMessage("Naming", "CA1720:Identifier contains type name", Justification = "We want to keep an interop name exactly as is", Scope = "namespaceanddescendants", Target = "DirectN")]
[assembly: SuppressMessage("Naming", "CA1715:Identifiers should have correct prefix", Justification = "We want to keep an interop name exactly as is", Scope = "namespaceanddescendants", Target = "DirectN")]
[assembly: SuppressMessage("Performance", "CA1815:Override equals and operator equals on value types", Justification = "If you need it, add a partial class and define it", Scope = "namespaceanddescendants", Target = "DirectN")]
[assembly: SuppressMessage("Performance", "CA1819:Properties should not return arrays", Justification = "Unfortunately, I don't think we have the choice here", Scope = "namespaceanddescendants", Target = "DirectN")]
[assembly: SuppressMessage("Style", "IDE1006:Naming Styles", Justification = "We want to keep an interop name exactly as is", Scope = "namespaceanddescendants", Target = "DirectN")]
[assembly: SuppressMessage("Design", "CA1031:Do not catch general exception types", Justification = "Sometimes, we don't have the choice", Scope = "namespaceanddescendants", Target = "DirectN")]
[assembly: SuppressMessage("Globalization", "CA1303:Do not pass literals as localized parameters", Justification = "We don't support localized messages", Scope = "namespaceanddescendants", Target = "DirectN")]
[assembly: SuppressMessage("Naming", "CA1721:Property names should not match get methods", Justification = "Oh, come on...")]
[assembly: SuppressMessage("Reliability", "CA2010:Always consume the value returned by methods marked with PreserveSigAttribute", Justification = "False positive sometimes.")]
[assembly: SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "Another day.")]
[assembly: SuppressMessage("Globalization", "CA1305:Specify IFormatProvider", Justification = "Not now.")]
[assembly: SuppressMessage("Globalization", "CA1307:Specify StringComparison", Justification = "Not here.")]
[assembly: SuppressMessage("Globalization", "CA1304:Specify CultureInfo", Justification = "Not again.")]
[assembly: SuppressMessage("Design", "CA1036:Override methods on comparable types", Justification = "Not always.")]
